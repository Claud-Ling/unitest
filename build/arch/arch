#!/bin/bash

# ./arch [d/l/x/s/h/#n]
# for unit test arch select.
# Author:lingyun@cambricon.com, 202102

# run env.
THIS_FILE=`basename $0`
THIS_PATH=`cd "$(dirname $0)"; pwd`

# arch target file name.
ARCH_TFILE=cross
ARCH_TPATH=${THIS_PATH}/${ARCH_TFILE}

# all support arch list.
ArchList=$(ls ${THIS_PATH} |grep -v ${ARCH_TFILE} |grep -v ${THIS_FILE} |tr "\n" " ")
ArchDefault=`echo "${ArchList}" |awk '{print $1}'`

# default config define.
CurArchI=0
CurArch=""

# function of get CurArch from arch file link.
# $? - none.
function GetCurArch() {
    CurArchI=0
    CurArch=""
	if [ -h "${ARCH_TPATH}" ]; then
		ArchR=`readlink ${ARCH_TPATH}`
		ArchR=`basename ${ArchR}`
		ArchI=1
		for Arch in ${ArchList}; do
			if [ "${Arch}" == "${ArchR}" ]; then
                CurArch=${Arch}
                CurArchI=${ArchI}
			fi
			ArchI=`expr ${ArchI} + 1`
		done
    fi
}

# function of set CurArch for arch target.
# $1 - set config with index(start 1)/name from ArchList.
# $? - 0-OK, 1-ERROR.
function SetCurArch() {
	SetRet=0
	ArchI=1
	ArchSel=""
	if [ "$1" -gt 0 ] 2>/dev/null ;then
        ArchType="index"
    	for Arch in ${ArchList}; do
    		if [ ${ArchI} -eq ${1} ]; then
    			ArchSel=${Arch}
    		fi
    		ArchI=`expr ${ArchI} + 1`
    	done
    else
        ArchType="name"
        for Arch in ${ArchList}; do
    		if [ ${Arch} == "$1" ]; then
    			ArchSel=${Arch}
    		fi
    		ArchI=`expr ${ArchI} + 1`
    	done
    fi
	if [ -z "${ArchSel}" ]; then
		echo "ERR: arch -> ${ArchType} ${1}"
	else
		if [ -e ${ARCH_TPATH} ]; then
			rm -f ${ARCH_TPATH}
		fi
		ln -sf "${ArchSel}" "${ARCH_TPATH}"
		CurArchI=$1
		CurArch=${ArchSel}
		echo "OK: arch -> ${CurArch}"
		SetRet=1
	fi
	return $SetRet
}

# function of sel CurArch from ArchList.
# $? - 0-OK, 1-ERROR.
function SelCurArch() {
	# list all config for select.
	echo "Please input select index:"
	ArchI=1
	ArchIDef=1
	for Arch in ${ArchList}; do
		if [ ${Arch} == "${ArchDefault}" ]; then
			ArchDesp="    (Default)"
	        ArchIDef=${ArchI}
		else
			ArchDesp=""
		fi
		if [ ${Arch} == "${CurArch}" ]; then
			echo "* ${ArchI}) ${Arch}${ArchDesp}"
		else
			echo "  ${ArchI}) ${Arch}${ArchDesp}"
		fi
		ArchI=`expr ${ArchI} + 1`
	done
	# read input select.
	read ArchIr
	if [ -z "${ArchIr}" ]; then
		if [ -z "${CurArch}" ]; then
			echo "Select Default: ${ArchDefault}"
			ArchIr=${ArchIDef}
		else
			echo "Select Not change: ${CurArch}"
			return 1
		fi
	elif [ ${ArchIr} -lt 1 ] || [ ${ArchIr} -ge ${ArchI} ]; then
		echo "Select Default: ${ArchDefault}"
		ArchIr=${ArchIDef}
	fi
	# set the select config.
	SetCurArch ${ArchIr}
	# return result.
	return $?
}

# function of show ArchList and CurArch.
# $? - none.
function ShowArchInfo() {
	echo "arch list: ${ArchList}"
	GetCurArch
	if [ -z "${CurArch}" ]; then
		echo "arch cur*: null"
	else
		echo "arch cur*: ${CurArch}"
	fi
}

# do it.
if [ $# -ge 1 ] ; then
    # help docs and operate with $1.
	if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ "$1" == "h" ]; then
		echo "./`basename $0` [d/l/x/s/h/#n]"
		echo "     [d] - default arch: ${ArchDefault}"
		echo "     [l] - list all support archs"
		echo "     [x] - change arch for current"
		echo "     [s] - selected arch is? empty if none"
		echo "     [h] - show this help doc"
		echo "     [#n]- change arch as index #n"
		echo "     null- default: l"
		exit 0
	elif [ "$1" == "s" ]; then
		GetCurArch
        if [ ! -z "${CurArch}" ]; then
            echo "${CurArch}"
        fi
	elif [ "$1" -gt 0 ] 2>/dev/null ;then
		SetCurArch $1
	else
		if [[ "$1" =~ "l"  ]]; then
			ShowArchInfo
		else
			GetCurArch
		fi
		if [[ "$1" =~ "d"  ]]; then
			SetCurArch ${ArchDefault}
		fi
		if [[ "$1" =~ "x"  ]]; then
			SelCurArch
		fi
		if [ -z "${CurArch}" ]; then
			SelCurArch
		fi
	fi
else
    ShowArchInfo
fi

exit 0
